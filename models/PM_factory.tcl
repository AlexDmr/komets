#_________________________________________________________________________________________________________
#_________________________________________________________________________________________________________
#_________________________________________________________________________________________________________
method PM_factory constructor {ptf c cmd} {
 if {[string equal $ptf *]} {set ptf Ptf_ALL}
 set this(ptf) [PTF ${objName}_ptf_ref]
 $this(ptf) maj $ptf
 set this(cmd_gen) $cmd
 set this(classes) $c
 append this(classes) { } [gmlObject info classes $c]

 return $objName
}

#_________________________________________________________________________________________________________
method PM_factory dispose {} {
 $this(ptf) dispose
 this inherited
}

#_________________________________________________________________________________________________________
Generate_accessors PM_factory classes

#_________________________________________________________________________________________________________
method PM_factory Is_compatible_with_ptf {ptf} {
 #return [$this(ptf) Accept_for_daughter $ptf]
 return [$ptf Accept_for_daughter $this(ptf)]
}

#_________________________________________________________________________________________________________
method PM_factory Is_compatible_with_type {type} {
 set pos [lsearch $this(classes) $type]
 return [expr $pos != -1]
}

#_________________________________________________________________________________________________________
method PM_factory Generate {prefixe LM {nb 1}} {
 set L [list]

 for {set i 0} {$i < $nb} {incr i} {
   set name "${prefixe}_PM_P_[$LM get_a_unique_id]"
   while {[gmlObject info exists object $name]} {
     set name "${prefixe}_PM_P_[$LM get_a_unique_id]"
    }
   if {[catch $this(cmd_gen) res]} {
     puts "Factory $objName failed :\n  cmd : $this(cmd_gen)\n  res : $res"
    } else {lappend L $name
            $LM Add_PM $name; $LM set_PM_active $name
           }
  }

 return $L
}

#_________________________________________________________________________________________________________
proc Generate_factories_for_PM_type {L_types prefixe {name {}} {descr {Generated by a factory}}} {
 set L [list]

 foreach class_ptf $L_types {
   set class [lindex $class_ptf 0]
   if {![gmlObject info exists class $class]} {continue}
   set ptf   [lindex $class_ptf 1]
   set f_name Factory_$class
   if {[gmlObject info exists object $f_name]} {
     lappend L $f_name
    } else {set L_args [gmlObject info args $class constructor]
            if {[llength $L_args] == 3} {
              set cmd_gen "$class \$name \{$class : $name\} \{$descr\}"
              lappend L [PM_factory $f_name $ptf $class $cmd_gen]
             }
           }
  }

 return $L
}

#_________________________________________________________________________________________________________
proc Generate_factories_for_PM_like {L_PM prefixe {name {}} {descr {Generated by a factory}}} {
 set L [list]

 foreach PM $L_PM {
   if {![gmlObject info exists object $PM]} {continue}
   set Lclasses [gmlObject info classes $PM]
   if {[lsearch $Lclasses Physical_model] == -1} {continue}
   set class [lindex $Lclasses 0]
   set f_name Factory_$class
   if {[gmlObject info exists object $f_name]} {
     lappend L $f_name
    } else {set L_args [gmlObject info args $class constructor]
            if {[llength $L_args] == 3} {
              set cmd_gen "$class \$name \{$class : $name\} \{$descr\}"
              lappend L [PM_factory $f_name [${PM}_cou get_ptf] $class $cmd_gen]
             }
           }
  }

 return $L
}

